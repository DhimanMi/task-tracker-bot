import asyncio
import logging
import datetime
import traceback
from typing import Optional, Any
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import BOT_TOKEN, DB_PATH, GOOGLE_SA_FILE, SHEET_ID, ADMIN_IDS
from db import DB
from search import find_similar_titles
from google_sheets import export_tasks_to_sheet  # –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ URL, –ª–∏–±–æ {'url':..., 'tab':...}

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = DB(DB_PATH)

CATEGORIES = ["development", "testing", "analytics", "other"]
CATEGORY_RU = {
    "development": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    "testing": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "analytics": "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
    "other": "–î—Ä—É–≥–æ–µ"
}

# ===== FSM =====
class AddTaskStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_title = State()
    waiting_for_description = State()

# ===== Helpers =====
def is_back(text: str) -> bool:
    return text.strip() == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

def main_menu(user_id=None):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    kb.add("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    kb.add("üîç –ü–æ–∏—Å–∫", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets")
    if user_id in ADMIN_IDS:
        kb.add("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
    return kb

def categories_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for c in CATEGORIES:
        kb.add(CATEGORY_RU[c])
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

async def safe_send(user_id: int, text: str, **kwargs: Any):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ñ–æ–Ω–æ–≤—ã—Ö —Ç–∞—Å–∫–æ–≤."""
    try:
        await bot.send_message(user_id, text, **kwargs)
    except Exception:
        logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user_id)

# ===== Start =====
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await db.init()
    await db.ensure_user(message.from_user.id, message.from_user.username)
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(message.from_user.id)
    )

# ===== Add Task =====
@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_start(message: types.Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard())
    await AddTaskStates.waiting_for_category.set()

@dp.message_handler(state=AddTaskStates.waiting_for_category)
async def add_task_category(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if is_back(text):
        await state.finish()
        await message.reply("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu(message.from_user.id))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ä—É—Å—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
    category = next((k for k, v in CATEGORY_RU.items() if v == text), None)
    if not category:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(category=category)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
    await AddTaskStates.waiting_for_title.set()

@dp.message_handler(state=AddTaskStates.waiting_for_title)
async def add_task_title(message: types.Message, state: FSMContext):
    if is_back(message.text):
        # –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–∞–º–æ–º—É –Ω–∞—á–∞–ª—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await add_task_start(message)
        return

    await state.update_data(title=message.text.strip())

    # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º", callback_data="desc_empty"))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º):", reply_markup=kb)
    await AddTaskStates.waiting_for_description.set()

@dp.callback_query_handler(lambda c: c.data == "desc_empty", state=AddTaskStates.waiting_for_description)
async def desc_empty_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await db.add_task(callback.from_user.id, data["title"], data["category"], "")
        await bot.edit_message_reply_markup(callback.from_user.id, callback.message.message_id, reply_markup=None)
        await bot.send_message(
            callback.from_user.id,
            f"–ó–∞–¥–∞—á–∞ '{data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{CATEGORY_RU.get(data['category'], data['category'])}'.",
            reply_markup=main_menu(callback.from_user.id)
        )
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ callback desc_empty")
        await bot.send_message(callback.from_user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(callback.from_user.id))
    finally:
        await state.finish()
        await callback.answer()

@dp.message_handler(state=AddTaskStates.waiting_for_description)
async def add_task_desc(message: types.Message, state: FSMContext):
    if is_back(message.text):
        # –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=kb)
        await AddTaskStates.waiting_for_title.set()
        return

    try:
        data = await state.get_data()
        desc = message.text.strip()
        await db.add_task(message.from_user.id, data["title"], data["category"], desc)
        await message.reply(
            f"–ó–∞–¥–∞—á–∞ '{data['title']}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{CATEGORY_RU.get(data['category'], data['category'])}'.",
            reply_markup=main_menu(message.from_user.id)
        )
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu(message.from_user.id))
    finally:
        await state.finish()

# ===== List Tasks =====
@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def list_tasks(message: types.Message):
    try:
        rows = await db.list_tasks(message.from_user.id)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.id)
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))
        return

    if not rows:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.", reply_markup=main_menu(message.from_user.id))
        return
    for r in rows:
        task_id, title, desc, category, status, created = r
        created_str = datetime.datetime.fromisoformat(created).strftime("%m/%d/%Y")
        text = (
            f"#{task_id} ‚Äî {title}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORY_RU.get(category, category)}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–ì–æ—Ç–æ–≤–æ' if status=='done' else '–û—Ç–∫—Ä—ã—Ç–æ'}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {created_str}\n"
            f"{desc or ''}"
        )
        kb = types.InlineKeyboardMarkup()
        if status != "done":
            kb.add(types.InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_{task_id}"))
        kb.add(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task_id}"))
        await message.reply(text, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("close_") or c.data.startswith("delete_"))
async def task_action(callback: types.CallbackQuery):
    try:
        action, task_id = callback.data.split("_", 1)
        task_id = int(task_id)
        if action == "close":
            await db.close_task(task_id, callback.from_user.id)
            await callback.message.edit_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –∑–∞–∫—Ä—ã—Ç–∞.")
        elif action == "delete":
            await db.delete_task(task_id, callback.from_user.id)
            await callback.message.edit_text(f"üóëÔ∏è –ó–∞–¥–∞—á–∞ #{task_id} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–∏ –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π %s", callback.data)
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π.")
    finally:
        await callback.answer()

# ===== Stats =====
@dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: types.Message):
    try:
        rows = await db.stats_by_category(message.from_user.id)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è %s", message.from_user.id)
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))
        return

    if not rows:
        await message.reply("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=main_menu(message.from_user.id))
        return
    text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for r in rows:
        text += f"{CATEGORY_RU.get(r[0], r[0])}: {r[1]}\n"
    await message.reply(text, reply_markup=main_menu(message.from_user.id))

# ===== Admin =====
@dp.message_handler(lambda m: m.text == "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —ç—Ç–æ –º–µ–Ω—é.")
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–û—Ç–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", "–í–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    await message.reply("–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

@dp.message_handler(lambda m: m.text in ["–û—Ç–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", "–í–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç"])
async def admin_toggle_export(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        if message.text == "–û—Ç–∫–ª—é—á–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç":
            await db.set_setting("export_enabled", "0")
            await message.reply("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª—é—á—ë–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu(message.from_user.id))
        else:
            await db.set_setting("export_enabled", "1")
            await message.reply("–≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á—ë–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=main_menu(message.from_user.id))
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", reply_markup=main_menu(message.from_user.id))

# ===== Search =====
@dp.message_handler(lambda m: m.text == "üîç –ü–æ–∏—Å–∫")
async def search_request(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: m.text not in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É","üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏","üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞","üîç","üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets"])
async def search_process(message: types.Message):
    q = message.text.strip()
    if not q:
        return
    try:
        tasks = await db.search_tasks(message.from_user.id, q)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.id)
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))
        return

    exact = [r for r in tasks if r[1].lower() == q.lower()]
    if exact:
        r = exact[0]
        await message.reply(
            f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞: #{r[0]} ‚Äî {r[1]}\n{r[2]}",
            reply_markup=main_menu(message.from_user.id)
        )
        return

    try:
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¢–ó –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ fuzzy –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ find_similar_titles.
        # –í –ø—Ä–æ–¥–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (pg_trgm / elastic).
        matches = find_similar_titles(q, tasks, limit=5, score_cutoff=60)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å find_similar_titles")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞.", reply_markup=main_menu(message.from_user.id))
        return

    if not matches:
        await message.reply("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id))
        return

    text = "–ü–æ—Ö–æ–∂–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
    for row, score in matches:
        text += f"#{row[0]} ‚Äî {row[1]} (score {score})\n"
    await message.reply(text, reply_markup=main_menu(message.from_user.id))

# ===== Export =====
async def export_worker(user_id: int, username: str, tasks: list):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞.
    –í –ø—Ä–æ–¥–µ: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä (Celery / RQ) —Å Redis/Broker ‚Äî —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–µ —Ç–µ—Ä—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ.
    –ó–¥–µ—Å—å: –∑–∞–ø—É—Å–∫–∞–µ–º –≤ event loop –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º to_thread –¥–ª—è –≤—ã–∑–æ–≤–∞ blocking-IO –∫–æ–¥–∞.
    """
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ export_tasks_to_sheet –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        # - —Å—Ç—Ä–æ–∫—É —Å URL, –∏–ª–∏
        # - dict {'url': ..., 'tab': ...}, –∏–ª–∏
        # - {'gid': ...} / {'tab_name': ...}
        result = await asyncio.to_thread(export_tasks_to_sheet, GOOGLE_SA_FILE, SHEET_ID, tasks, username)
        sheet_url: Optional[str] = None
        extra_info = None

        if isinstance(result, str):
            sheet_url = result
        elif isinstance(result, dict):
            # –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å URL –∏–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Å—ã–ª–∫—É
            sheet_url = result.get("url")
            extra_info = result.get("tab") or result.get("gid") or result.get("tab_name")
            if not sheet_url and SHEET_ID:
                # –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ gid –∏–ª–∏ tab_name, —Å–æ–±–µ—Ä—ë–º –±–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ SHEET_ID
                sheet_url = f"https://docs.google.com/spreadsheets/d/{SHEET_ID}/edit"
                if extra_info and str(extra_info).isdigit():
                    sheet_url += f"#gid={extra_info}"

        # —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if sheet_url:
            text = f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É: {sheet_url}"
            if extra_info:
                text += f"\n–í–∫–ª–∞–¥–∫–∞: {extra_info}"
            await safe_send(user_id, text, reply_markup=main_menu(user_id))
        else:
            # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–∏–º
            await safe_send(user_id, "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Google Sheets.", reply_markup=main_menu(user_id))

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", user_id, traceback.format_exc())
        await safe_send(user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", reply_markup=main_menu(user_id))

@dp.message_handler(lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets")
async def export_tasks(message: types.Message):
    try:
        export_enabled = await db.get_setting("export_enabled")
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ export_enabled")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))
        return

    if export_enabled == "0":
        await message.reply("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª—é—á—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=main_menu(message.from_user.id))
        return

    try:
        tasks = await db.get_all_tasks_for_user(message.from_user.id)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", message.from_user.id)
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu(message.from_user.id))
        return

    if not tasks:
        await message.reply("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=main_menu(message.from_user.id))
        return

    # –∑–∞–ø—É—Å—Ç–∏–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–µ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å —Å—Å—ã–ª–∫–æ–π
    await message.reply("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ. –Ø –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É, –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.", reply_markup=main_menu(message.from_user.id))

    # –≤ –ø—Ä–æ–¥–µ: –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ (Celery/RQ). –ó–¥–µ—Å—å ‚Äî –ª–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π —Ñ–æ–Ω –≤–Ω—É—Ç—Ä–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞:
    asyncio.create_task(export_worker(message.from_user.id, message.from_user.username or str(message.from_user.id), tasks))

# ===== Main =====
if __name__ == "__main__":
    async def on_startup(_):
        await db.init()
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)